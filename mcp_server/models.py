# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:14:41+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class ErrorClass(Enum):
    DELIVERY_ERROR_CLASS_UNSPECIFIED = 'DELIVERY_ERROR_CLASS_UNSPECIFIED'
    PERMANENT_ERROR = 'PERMANENT_ERROR'
    TEMPORARY_ERROR = 'TEMPORARY_ERROR'


class ErrorType(Enum):
    DELIVERY_ERROR_TYPE_UNSPECIFIED = 'DELIVERY_ERROR_TYPE_UNSPECIFIED'
    RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED'
    SUSPECTED_SPAM = 'SUSPECTED_SPAM'
    CONTENT_SPAMMY = 'CONTENT_SPAMMY'
    BAD_ATTACHMENT = 'BAD_ATTACHMENT'
    BAD_DMARC_POLICY = 'BAD_DMARC_POLICY'
    LOW_IP_REPUTATION = 'LOW_IP_REPUTATION'
    LOW_DOMAIN_REPUTATION = 'LOW_DOMAIN_REPUTATION'
    IP_IN_RBL = 'IP_IN_RBL'
    DOMAIN_IN_RBL = 'DOMAIN_IN_RBL'
    BAD_PTR_RECORD = 'BAD_PTR_RECORD'


class DeliveryError(BaseModel):
    errorClass: Optional[ErrorClass] = Field(
        None, description='The class of delivery error.'
    )
    errorRatio: Optional[float] = Field(
        None,
        description='The ratio of messages where the error occurred vs all authenticated traffic.',
    )
    errorType: Optional[ErrorType] = Field(
        None, description='The type of delivery error.'
    )


class Permission(Enum):
    PERMISSION_UNSPECIFIED = 'PERMISSION_UNSPECIFIED'
    OWNER = 'OWNER'
    READER = 'READER'
    NONE = 'NONE'


class Domain(BaseModel):
    createTime: Optional[str] = Field(
        None,
        description='Timestamp when the user registered this domain. Assigned by the server.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the Domain. Domain names have the form `domains/{domain_name}`, where domain_name is the fully qualified domain name (i.e., mymail.mydomain.com).',
    )
    permission: Optional[Permission] = Field(
        None, description='Userâ€™s permission for this domain. Assigned by the server.'
    )


class FeedbackLoop(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Feedback loop identifier that uniquely identifies individual campaigns.',
    )
    spamRatio: Optional[float] = Field(
        None,
        description='The ratio of user marked spam messages with the identifier vs the total number of inboxed messages with that identifier.',
    )


class Reputation(Enum):
    REPUTATION_CATEGORY_UNSPECIFIED = 'REPUTATION_CATEGORY_UNSPECIFIED'
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    LOW = 'LOW'
    BAD = 'BAD'


class IpReputation(BaseModel):
    ipCount: Optional[str] = Field(
        None,
        description='Total number of unique IPs in this reputation category. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).',
    )
    numIps: Optional[str] = Field(
        None,
        description='Total number of unique IPs in this reputation category. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/). Deprecated to be complied with ApiLinter for Quantities. Use ip_count instead.',
    )
    reputation: Optional[Reputation] = Field(
        None, description='The reputation category this IP reputation represents.'
    )
    sampleIps: Optional[List[str]] = Field(
        None, description='A sample of IPs in this reputation category.'
    )


class ListDomainsResponse(BaseModel):
    domains: Optional[List[Domain]] = Field(None, description='The list of domains.')
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class DomainReputation(Enum):
    REPUTATION_CATEGORY_UNSPECIFIED = 'REPUTATION_CATEGORY_UNSPECIFIED'
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    LOW = 'LOW'
    BAD = 'BAD'


class TrafficStats(BaseModel):
    deliveryErrors: Optional[List[DeliveryError]] = Field(
        None,
        description='Delivery errors for the domain. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).',
    )
    dkimSuccessRatio: Optional[float] = Field(
        None,
        description='The ratio of mail that successfully authenticated with DKIM vs. all mail that attempted to authenticate with [DKIM](http://www.dkim.org/). Spoofed mail is excluded.',
    )
    dmarcSuccessRatio: Optional[float] = Field(
        None,
        description='The ratio of mail that passed [DMARC](https://dmarc.org/) alignment checks vs all mail received from the domain that successfully authenticated with either of [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).',
    )
    domainReputation: Optional[DomainReputation] = Field(
        None, description='Reputation of the domain.'
    )
    inboundEncryptionRatio: Optional[float] = Field(
        None,
        description='The ratio of incoming mail (to Gmail), that passed secure transport (TLS) vs all mail received from that domain. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).',
    )
    ipReputations: Optional[List[IpReputation]] = Field(
        None,
        description='Reputation information pertaining to the IP addresses of the email servers for the domain. There is exactly one entry for each reputation category except REPUTATION_CATEGORY_UNSPECIFIED.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the traffic statistics. Traffic statistic names have the form `domains/{domain}/trafficStats/{date}`, where domain_name is the fully qualified domain name (i.e., mymail.mydomain.com) of the domain this traffic statistics pertains to and date is the date in yyyymmdd format that these statistics corresponds to. For example: domains/mymail.mydomain.com/trafficStats/20160807',
    )
    outboundEncryptionRatio: Optional[float] = Field(
        None,
        description='The ratio of outgoing mail (from Gmail) that was accepted over secure transport (TLS).',
    )
    spammyFeedbackLoops: Optional[List[FeedbackLoop]] = Field(
        None,
        description='Spammy [Feedback loop identifiers] (https://support.google.com/mail/answer/6254652) with their individual spam rates. This metric only pertains to traffic that is authenticated by [DKIM](http://www.dkim.org/).',
    )
    spfSuccessRatio: Optional[float] = Field(
        None,
        description='The ratio of mail that successfully authenticated with SPF vs. all mail that attempted to authenticate with [SPF](http://www.openspf.org/). Spoofed mail is excluded.',
    )
    userReportedSpamRatio: Optional[float] = Field(
        None,
        description='The ratio of user-report spam vs. email that was sent to the inbox. This metric only pertains to emails authenticated by [DKIM](http://www.dkim.org/).',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class ListTrafficStatsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    trafficStats: Optional[List[TrafficStats]] = Field(
        None, description='The list of TrafficStats.'
    )
